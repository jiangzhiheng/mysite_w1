1.创建Project
    django-admin startproject mysite
    mysite
        mysite_diango
            - settings.py   #配置文件
            - url.py    #路由系统
            - wsgi.py   #WSGI
        manage.py   #django程序启动文件

2.创建APP
    cd mysite
    python manage.py startupapp app01   #cmdb为app名称
    监控
    CMDB
    。。。
3.编写代码
    urls.py
    view.py 函数

4.启动django程序
    python manage.py runserver 127.0.0.1:8000

5.使用模板
    setings设置
    render（request，html）

6.静态文件的配置
    #定义静态文件的前缀
    STATIC_URL = '/static/'

    #定义静态文件的目录
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR,'statics'),
    )

    statics目录放置静态文件
    <script src="/static/jquery-2.0.3.js"></script>

7.连接数据库，操作数据库
    ORM
    Setting。py

    class UserInfo(models.Model):
        user = models.CharField(max_length=32)
        email = models.CharField(max_length=32)

    setting里面注册app

    执行命令
        python manage.py makemigrations
        python manage.py migrate
        =====>数据库表创建完成
8.操作数据库
    创建
        models.UserInfo.objects.create(user=u,email=e)
    获取
        data_list = models.UserInfo.objects.all()





用户请求------>路由系统（/login/-->函数名）

1.路由系统

路由系统详解：

2.模板
    a.模板渲染的过程
    b.{{ k1 }}
    c.for循环
    d.内置方法
    e.自定义方法
        filter
            限制：传参数的个数
            支持模板语言的if条件
        simple_tag
            不支持作为if条件

        1.创建指定文件夹，名称不能改templatetags
        2.创建任意xx.py
        from django import template
        from django.utils.safestring import mark_safe
        #register名称不能变
        register = template.Library()
        创建函数

        3.在html模板的头部执行
        {% load xx %}

        4.{{ k1|f1 }}
        5.在settings注册app
    f. 模板的继承（母板）-----子板
    {% block body %}
    {% endblock%}
    g. {% include 'xxx.html'%}，html中小组件的重复利用

3.Ajax

4.Model，ORM
    1.创建（CURD）数据库表

        a.app models.py中写类
            from django.db import models
            class userinfo(models.Model):
                name = models.CharField(max_length=30)  #string
                email = models.EmailField() #string 帮admin做输入验证，modelform
                memo = models.TextField()   #text
        b.python manage.py mkmigrations
          python manage.py migrate
    2.admin.py中注册创建的表
    3.创建Django后台管理超级用户
        python manage.py createsuperuser




    2.操作数据库的数据








